export const data = JSON.parse("{\"key\":\"v-5ce5848d\",\"path\":\"/posts/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/javase/java%E5%B8%B8%E7%94%A8%E7%B1%BB.html\",\"title\":\"java基础-常用API、集合\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"java基础-常用API、集合\",\"date\":\"2023-02-16T00:00:00.000Z\",\"category\":[\"JavaSE\"],\"summary\":\"黑马2022资料阶段一：java基础-第六章 4-1 String类 03-概述 java程序中，所有双引号字符串都是String类对象。 字符串是常量，创建后不能更改。\\r\\\" String类内部有一个char[]，没有提供set方法给我们修改内存。上图代码中，只是讲栈内存中的s1变量指向了一个新的String类对象。\\\" 04-String类的常见构造 05-\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.iocaop.com/posts/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/javase/java%E5%B8%B8%E7%94%A8%E7%B1%BB.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"赖卓成的笔记\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"java基础-常用API、集合\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-17T06:36:29.000Z\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-02-16T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-17T06:36:29.000Z\"}]]},\"excerpt\":\"\",\"headers\":[{\"level\":2,\"title\":\"4-1 String类\",\"slug\":\"_4-1-string类\",\"link\":\"#_4-1-string类\",\"children\":[{\"level\":3,\"title\":\"03-概述\",\"slug\":\"_03-概述\",\"link\":\"#_03-概述\",\"children\":[]},{\"level\":3,\"title\":\"04-String类的常见构造\",\"slug\":\"_04-string类的常见构造\",\"link\":\"#_04-string类的常见构造\",\"children\":[]},{\"level\":3,\"title\":\"05-创建字符串对象的区别对比\",\"slug\":\"_05-创建字符串对象的区别对比\",\"link\":\"#_05-创建字符串对象的区别对比\",\"children\":[]},{\"level\":3,\"title\":\"06-String类常见面试题\",\"slug\":\"_06-string类常见面试题\",\"link\":\"#_06-string类常见面试题\",\"children\":[]}]},{\"level\":2,\"title\":\"4-2 StringBuilder\",\"slug\":\"_4-2-stringbuilder\",\"link\":\"#_4-2-stringbuilder\",\"children\":[{\"level\":3,\"title\":\"15-概述\",\"slug\":\"_15-概述\",\"link\":\"#_15-概述\",\"children\":[]},{\"level\":3,\"title\":\"16-常用构造\",\"slug\":\"_16-常用构造\",\"link\":\"#_16-常用构造\",\"children\":[]},{\"level\":3,\"title\":\"17-常用成员方法\",\"slug\":\"_17-常用成员方法\",\"link\":\"#_17-常用成员方法\",\"children\":[]},{\"level\":3,\"title\":\"18-StringBuilder提高效率的原理图\",\"slug\":\"_18-stringbuilder提高效率的原理图\",\"link\":\"#_18-stringbuilder提高效率的原理图\",\"children\":[]}]},{\"level\":2,\"title\":\"5-1 ArrayList\",\"slug\":\"_5-1-arraylist\",\"link\":\"#_5-1-arraylist\",\"children\":[{\"level\":3,\"title\":\"01-为什么用集合？\",\"slug\":\"_01-为什么用集合\",\"link\":\"#_01-为什么用集合\",\"children\":[]},{\"level\":3,\"title\":\"02-ArrayList的构造方法和添加方法\",\"slug\":\"_02-arraylist的构造方法和添加方法\",\"link\":\"#_02-arraylist的构造方法和添加方法\",\"children\":[]}]},{\"level\":2,\"title\":\"8-1API的基本使用与Object类\",\"slug\":\"_8-1api的基本使用与object类\",\"link\":\"#_8-1api的基本使用与object类\",\"children\":[{\"level\":3,\"title\":\"06-Object面试题\",\"slug\":\"_06-object面试题\",\"link\":\"#_06-object面试题\",\"children\":[]},{\"level\":3,\"title\":\"07-Objects方法\",\"slug\":\"_07-objects方法\",\"link\":\"#_07-objects方法\",\"children\":[]},{\"level\":3,\"title\":\"08-BigDecimal构造\",\"slug\":\"_08-bigdecimal构造\",\"link\":\"#_08-bigdecimal构造\",\"children\":[]},{\"level\":3,\"title\":\"10-BigDecimal特殊方法\",\"slug\":\"_10-bigdecimal特殊方法\",\"link\":\"#_10-bigdecimal特殊方法\",\"children\":[]},{\"level\":3,\"title\":\"11-基本数据类型包装类\",\"slug\":\"_11-基本数据类型包装类\",\"link\":\"#_11-基本数据类型包装类\",\"children\":[]},{\"level\":3,\"title\":\"12-Integer获得对象\",\"slug\":\"_12-integer获得对象\",\"link\":\"#_12-integer获得对象\",\"children\":[]},{\"level\":3,\"title\":\"13-Integer自动装箱和自动拆箱\",\"slug\":\"_13-integer自动装箱和自动拆箱\",\"link\":\"#_13-integer自动装箱和自动拆箱\",\"children\":[]},{\"level\":3,\"title\":\"14-Integer类型转换\",\"slug\":\"_14-integer类型转换\",\"link\":\"#_14-integer类型转换\",\"children\":[]}]}],\"git\":{\"createdTime\":1681713389000,\"updatedTime\":1681713389000,\"contributors\":[{\"name\":\"赖卓成\",\"email\":\"911823616@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":4.8,\"words\":1439},\"filePathRelative\":\"posts/个人学习/javase/java常用类.md\",\"localizedDate\":\"2023年2月16日\"}")
